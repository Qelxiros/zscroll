* Zscroll
** Simple Example
~-n~ is needed when using with lemonbar (bar-aint-recursive) or polybar:
#+begin_src sh
$ zscroll -b "⮕ " "$(mpc current)"
# or
$ mpc current | zscroll -b "⮕ "
#+end_src

By default, zscroll will add " - " between the end and start of scrolling text. This can be adjusted with the ~-p~ option. Here is a zoomed in example of the above command (with a 0.4 second update delay):

[[http://noctuid.github.io/zscroll/assets/example_bar.gif][http://noctuid.github.io/zscroll/assets/example_bar.gif]]

** Installation
*** Arch
Install [[https://aur.archlinux.org/packages/zscroll-git/][zscroll-git]] from the AUR.

*** Nix
[[https://nixos.org/nix/][Nix]] is a distro-independent package manager.

#+begin_src sh
$ nix-env -i zscroll
#+end_src

*** Manual
#+begin_src sh
$ git clone https://github.com/noctuid/zscroll
$ cd zscroll
$ sudo python setup.py install
#+end_src

** Dynamically Updating Text
Zscroll can now update its text by itself. This may be nice for panels that don't allow for the user to conditionally start new processes. It also gets rid of the need for an [[https://github.com/noctuid/dotfiles/blob/a251c682aa71e115ca83e75f938016e2f134ed47/aesthetics/.panel_scripts/panel#L39][ugly function]] to repeatedly kill and start the scroller. Using zscroll to prevent this may even save some battery. I can't say for certain that the change is significant because of how inconsistently powertop displays my panel's power usage though. See my [[https://github.com/noctuid/dotfiles/blob/master/aesthetics/.panel_scripts/panel][current panel script]] for examples of using zscroll with lemonbar.

A simple use case is where one might to display the current window's title. This can be done with the ~-u~ option, which will run zscroll's positional argument as a command to check for changes:
#+begin_src sh
$ zscroll -b "| " -a " |" -u "xtitle"
#+end_src

Zscroll even supports more complex updates by searching for a regular expression in the output of a command to determine whether certain settings can be changed. As an example, this can be useful for displaying a pause icon and prevent scrolling when the current song is paused. The following command will take these actions when "paused" is found in the output of the command ~mpc status~:
#+begin_src sh
$ zscroll -d 0.2 -n -u -b "⮕ x" -M "mpc status" -m "playing" -b "⮕ " -s 1 \
	-m "paused" -b "⮔ " -s 0 "mpc current"
#+end_src

There are some caveats. If you are only using one ~-m~ search term and want to set a default for an option, you must specify that option twice (once for the default and once for the ~-m~). This does not apply if you have more than one ~-m~ (meaning if you set an option only once it will be used as a default and not with any specific ~-m~). Also, if an option is specified with any ~-m~, it must be specified for all of them. Any option that takes an argument can be altered when a ~-m~ search term is found. Note that when multiple ~-m~ options happen to be matched, it is the last one that will take effect.

Any option that takes an argument can (bpm)See the man page for more information.

** Fullwidth Characters
Zscroll intelligently deals with fullwidth characters by default by counting them as twice the length of halfwidth characters. This ensures that the actual visual length of the scrolling text does not change. Here is a normal-sized gif of the above command that demonstrates this:
[[http://noctuid.github.io/zscroll/assets/music_scroll.gif][http://noctuid.github.io/zscroll/assets/music_scroll.gif]]

** Use with Polybar
Here's an example of using zscroll instead of polybar's mpd module.

In polybar config:
#+begin_src conf
[module/mpd]
type = custom/script
exec = /path/to/script
tail = true

label-foreground = ${colors.music}
#+end_src

In the script:
#+begin_src shell
#!/usr/bin/env bash

zscroll -n -u -b "♪ x" -d 0.3 -M "mpc status" -m "playing" -b " " \
	-s 1 -m "paused" -b " " -s 0 "mpc current" &

wait
#+end_src

For an alternate method that does not use zscroll's dynamic updating, see [[https://github.com/jaagr/polybar/issues/353#issuecomment-273388042][here]].

** Similar
- z3bratabs' [[https://github.com/z3bratabs/skroll][skroll]]
- benghaem's [[https://github.com/benghaem/dotfiles/blob/1dcbee5ed235a8e319dcc4255df10f0a6b23b6fe/bin/panel/scroller.c][scroller]]

** Why
I was using benghaem's scroller for a while. I didn't like that the arguments were all positional, the lack of a right text padding option, and the lack of an option to change the scroll speed. I just found skroll which is nicer since it has options and an actual manpage and is in the AUR. However, it doesn't have a left text option which is necessary for my bar script to work properly. Also, they are both written in c, which doesn't seem practical to me for such a simple script.

Zscroll supports the features I liked from each. It has a speed option, adds an option for right padding text, and will work on text as an argument or piped into it.

I called this zscroll because it's the last scroller I'll use.. but more importantly because I couldn't think of another name.
